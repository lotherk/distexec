/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "distexec"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "distexec"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1.0 Copyright (C) 2017 Konrad Lother <k@hiddenbox.org>"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *detailed_help_help; /**< @brief Print help, including all details and hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char ** config_arg;	/**< @brief Configuration file.  */
  char ** config_orig;	/**< @brief Configuration file original value given at command line.  */
  unsigned int config_min; /**< @brief Configuration file's minimum occurreces */
  unsigned int config_max; /**< @brief Configuration file's maximum occurreces */
  const char *config_help; /**< @brief Configuration file help description.  */
  const char *output_help; /**< @brief Use --stdout and --stdin combined help description.  */
  const char *stdout_help; /**< @brief Print remote stdout help description.  */
  const char *stderr_help; /**< @brief Print remote stderr help description.  */
  const char *progress_help; /**< @brief Print progressbar help description.  */
  const char *list_help; /**< @brief Print hosts help description.  */
  char ** plugin_path_arg;	/**< @brief Path to plugins (default='/usr/local/share/distexec/plugins').  */
  char ** plugin_path_orig;	/**< @brief Path to plugins original value given at command line.  */
  unsigned int plugin_path_min; /**< @brief Path to plugins's minimum occurreces */
  unsigned int plugin_path_max; /**< @brief Path to plugins's maximum occurreces */
  const char *plugin_path_help; /**< @brief Path to plugins help description.  */
  char ** plugin_arg;	/**< @brief Plugin to load.  */
  char ** plugin_orig;	/**< @brief Plugin to load original value given at command line.  */
  unsigned int plugin_min; /**< @brief Plugin to load's minimum occurreces */
  unsigned int plugin_max; /**< @brief Plugin to load's maximum occurreces */
  const char *plugin_help; /**< @brief Plugin to load help description.  */
  char * filter_arg;	/**< @brief Filter query.  */
  char * filter_orig;	/**< @brief Filter query original value given at command line.  */
  const char *filter_help; /**< @brief Filter query help description.  */
  char ** expect_arg;	/**< @brief Filter output .  */
  char ** expect_orig;	/**< @brief Filter output  original value given at command line.  */
  unsigned int expect_min; /**< @brief Filter output 's minimum occurreces */
  unsigned int expect_max; /**< @brief Filter output 's maximum occurreces */
  const char *expect_help; /**< @brief Filter output  help description.  */
  char ** env_arg;	/**< @brief Environment variable.  */
  char ** env_orig;	/**< @brief Environment variable original value given at command line.  */
  unsigned int env_min; /**< @brief Environment variable's minimum occurreces */
  unsigned int env_max; /**< @brief Environment variable's maximum occurreces */
  const char *env_help; /**< @brief Environment variable help description.  */
  int concurrent_arg;	/**< @brief Number of concurrent execution threads (default='1').  */
  char * concurrent_orig;	/**< @brief Number of concurrent execution threads original value given at command line.  */
  const char *concurrent_help; /**< @brief Number of concurrent execution threads help description.  */
  const char *log_split_help; /**< @brief Split logfile per host (needs --log-file) help description.  */
  char * log_file_arg;	/**< @brief Log to file instead of stdout.  */
  char * log_file_orig;	/**< @brief Log to file instead of stdout original value given at command line.  */
  const char *log_file_help; /**< @brief Log to file instead of stdout help description.  */
  char * log_format_date_arg;	/**< @brief Date format (default='%Y-%m-%d').  */
  char * log_format_date_orig;	/**< @brief Date format original value given at command line.  */
  const char *log_format_date_help; /**< @brief Date format help description.  */
  char * log_format_time_arg;	/**< @brief Time format (default='%H:%M:%S').  */
  char * log_format_time_orig;	/**< @brief Time format original value given at command line.  */
  const char *log_format_time_help; /**< @brief Time format help description.  */
  char * log_format_arg;	/**< @brief Log format.  */
  char * log_format_orig;	/**< @brief Log format original value given at command line.  */
  const char *log_format_help; /**< @brief Log format help description.  */
  int debug_flag;	/**< @brief Enable debug messages (default=on).  */
  const char *debug_help; /**< @brief Enable debug messages help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int stdout_given ;	/**< @brief Whether stdout was given.  */
  unsigned int stderr_given ;	/**< @brief Whether stderr was given.  */
  unsigned int progress_given ;	/**< @brief Whether progress was given.  */
  unsigned int list_given ;	/**< @brief Whether list was given.  */
  unsigned int plugin_path_given ;	/**< @brief Whether plugin-path was given.  */
  unsigned int plugin_given ;	/**< @brief Whether plugin was given.  */
  unsigned int filter_given ;	/**< @brief Whether filter was given.  */
  unsigned int expect_given ;	/**< @brief Whether expect was given.  */
  unsigned int env_given ;	/**< @brief Whether env was given.  */
  unsigned int concurrent_given ;	/**< @brief Whether concurrent was given.  */
  unsigned int log_split_given ;	/**< @brief Whether log-split was given.  */
  unsigned int log_file_given ;	/**< @brief Whether log-file was given.  */
  unsigned int log_format_date_given ;	/**< @brief Whether log-format-date was given.  */
  unsigned int log_format_time_given ;	/**< @brief Whether log-format-time was given.  */
  unsigned int log_format_given ;	/**< @brief Whether log-format was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
